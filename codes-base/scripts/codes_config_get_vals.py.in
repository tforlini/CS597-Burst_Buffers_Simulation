#!/usr/bin/python2.7

#
# Copyright (C) 2014 University of Chicago.
# See COPYRIGHT notice in top-level directory.
#
#

import argparse
import sys
import os
import imp
from itertools import islice

# internal testing: import directly
#import configurator as conf

# internal testing: import directly
#import configurator as conf

# dynamically load from lib path
def import_from(fname):
    path,name = os.path.split(fname)
    name,ext  = os.path.splitext(name) 

    fmod, fname, data = imp.find_module(name, [path])
    return imp.load_module(name,fmod,fname,data)

conf = import_from("@libdir@/configurator.py")

def main():
    args = parse_args()

    mod = conf.import_from(args.substitute_py)

    conf.check_cfields(mod)
    
    for pair in mod.cfields:
        if pair[0] == args.token:
            sys.stdout.write(str(pair[1][0]))
            for x in islice(pair[1],1,None):
                sys.stdout.write(" " + str(x))
            sys.stdout.write('\n')
            sys.exit(0) # success
    else: # failure, did not find
        raise ValueError('could not find token "' + args.token + '"')
        

def parse_args():
    parser = argparse.ArgumentParser(\
            description="echo the values of a token file to stdout")
    parser.add_argument("substitute_py",
            help='python file defining "cfields" variable consisting of '
                 'elements of the form '
                 '( replacement_token, [replacements...])')
    parser.add_argument("token",
            help="replacement token to print values out for")
    return parser.parse_args()

if __name__ == "__main__":
    main()
